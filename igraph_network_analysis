###############共起ネットワークについて##################################################################################################################################
library(dplyr)
library(igraph)
library(RColorBrewer)

ASV.fungi.table <- read.table("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/results(DADA2~relative_abundance)/for_ITS/rarefied_ASV_table.txt",header = T)
ASV.bacteria.table <- read.table("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/results(DADA2~relative_abundance)/for_16S/1207_primer除いたver/rarefied_ASV_table.txt", header = T)
ASV.amf.table <- read.table("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/results(DADA2~relative_abundance)/for_AMF/うまく行ったデータ/rarefied_ASV_table_fixed_1108.txt", header = T)

#taxonomy
taxonomy_fungi <- ASV.fungi.table [,(ncol(ASV.fungi.table)-6):ncol(ASV.fungi.table), drop = FALSE]
taxonomy_bacteria <- ASV.bacteria.table [,(ncol(ASV.bacteria.table)-5):ncol(ASV.bacteria.table), drop = FALSE]
taxonomy_amf <- ASV.amf.table[,(ncol(ASV.amf.table)-11):ncol(ASV.amf.table), drop = FALSE]
taxonomy_amf <- taxonomy_amf[,1:(ncol(taxonomy_amf)-5)]

# Remove "k__", "p__" and "c__" before phylum name
taxonomy_fungi <- data.frame(lapply(taxonomy_fungi, function(x){gsub(pattern="k__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy_fungi <- data.frame(lapply(taxonomy_fungi, function(x){gsub(pattern="p__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy_fungi <- data.frame(lapply(taxonomy_fungi, function(x){gsub(pattern="c__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy_fungi <- data.frame(lapply(taxonomy_fungi, function(x){gsub(pattern="o__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy_fungi <- data.frame(lapply(taxonomy_fungi, function(x){gsub(pattern="f__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy_fungi <- data.frame(lapply(taxonomy_fungi, function(x){gsub(pattern="g__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy_fungi <- data.frame(lapply(taxonomy_fungi, function(x){gsub(pattern="s__", replacement = "", x)}),stringsAsFactors = FALSE)
rownames(taxonomy_fungi) <- rownames(ASV.fungi.table)  # 行名を元の行名で設定

#例: サンプル名と植栽区の対応を持つデータフレームを読み込む(tree & location)
sample_info <- read.csv("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/network_analysis/scores/sample_info.csv", header = T, row.names = 1)

#ASV_table
ASV.fungi.table <- ASV.fungi.table[,1:(ncol(ASV.fungi.table)-7)]
ASV.bacteria.table <- ASV.bacteria.table[,1:(ncol(ASV.bacteria.table)-6)]
ASV.amf.table <- ASV.amf.table[,1:(ncol(ASV.amf.table)-12)]

#行と列を入れ替える
ASV.fungi.table <- t(ASV.fungi.table)
ASV.bacteria.table <- t(ASV.bacteria.table)
ASV.amf.table <- t(ASV.amf.table)

# ASV._.tableをデータフレームに変換
ASV.fungi.table <- as.data.frame(ASV.fungi.table)
ASV.bacteria.table <- as.data.frame(ASV.bacteria.table)
ASV.amf.table <- as.data.frame(ASV.amf.table)

#データセットを相対頻度に変換
asv_fungi_relative <- ASV.fungi.table %>%
  # 各サンプルの総リード数を計算
  mutate(total_reads = rowSums(across(everything()))) %>%
  # 各ASVのリード数をそのサンプルの総リード数で割る
  mutate(across(everything(), ~ . / total_reads)) %>%
  # 不要な合計リード数の列を削除
  select(-total_reads)

asv_bacteria_relative <- ASV.bacteria.table %>%
  # 各サンプルの総リード数を計算
  mutate(total_reads = rowSums(across(everything()))) %>%
  # 各ASVのリード数をそのサンプルの総リード数で割る
  mutate(across(everything(), ~ . / total_reads)) %>%
  # 不要な合計リード数の列を削除
  select(-total_reads)

asv_amf_relative <- ASV.amf.table %>%
  # 各サンプルの総リード数を計算
  mutate(total_reads = rowSums(across(everything()))) %>%
  # 各ASVのリード数をそのサンプルの総リード数で割る
  mutate(across(everything(), ~ . / total_reads)) %>%
  # 不要な合計リード数の列を削除
  select(-total_reads)

# いずれかの行で0.01以上のASVを持つ列のみを残す
asv_fungi_filtered <- asv_fungi_relative %>%
  select(where(~ any(. > 0.01)))  
asv_bacteria_filtered <- asv_bacteria_relative %>%
  select(where(~ any(. > 0.01))) 
asv_amf_filtered <- asv_amf_relative %>%
  select(where(~ any(. > 0.01))) 

# asv_fungi_filteredの列名に基づいてtaxonomy_fungiから行名が一致する行を抽出
taxonomy_fungi_filtered <- taxonomy_fungi[rownames(taxonomy_fungi) %in% colnames(asv_fungi_filtered), ]
taxonomy_bacteria_filtered <- taxonomy_bacteria[rownames(taxonomy_bacteria) %in% colnames(asv_bacteria_filtered), ]
taxonomy_amf_filtered <- taxonomy_amf[rownames(taxonomy_amf) %in% colnames(asv_amf_filtered), ]

# 列名にプレフィックスを追加
colnames(asv_fungi_filtered) <- paste("fungi", colnames(asv_fungi_filtered), sep = "_")
rownames(taxonomy_fungi_filtered) <- paste("fungi", rownames(taxonomy_fungi_filtered), sep = "_")
colnames(asv_bacteria_filtered) <- paste("bacteria", colnames(asv_bacteria_filtered), sep = "_")
rownames(taxonomy_bacteria_filtered) <- paste("bacteria", rownames(taxonomy_bacteria_filtered), sep = "_")
colnames(asv_amf_filtered) <- paste("amf", colnames(asv_amf_filtered), sep = "_")
rownames(taxonomy_amf_filtered) <- paste("amf", rownames(taxonomy_amf_filtered), sep = "_")

# 例: 68個のサンプル名を作成
new_row_names <- paste0("CSM_", sprintf("%02d", 1:68))
rownames(asv_fungi_filtered) <- new_row_names
rownames(asv_bacteria_filtered) <- new_row_names
rownames(asv_amf_filtered) <- new_row_names
rownames(sample_info) <- new_row_names

# Sample informationの取得
sample_info <- as.data.frame(sample_info)  # 確認用にデータフレームに変換

# site毎にデータを二分化
ground_samples <- rownames(sample_info[sample_info$site == "ground", ])
canopy_samples <- rownames(sample_info[sample_info$site == "canopy", ])

# ASVデータを分ける
asv_fungi_ground <- asv_fungi_filtered[ground_samples, ]
asv_fungi_canopy <- asv_fungi_filtered[canopy_samples, ]
asv_bacteria_ground <- asv_bacteria_filtered[ground_samples, ]
asv_bacteria_canopy <- asv_bacteria_filtered[canopy_samples, ]
asv_amf_ground <- asv_amf_filtered[ground_samples, ]
asv_amf_canopy <- asv_amf_filtered[canopy_samples, ]
######ここでASVデータが場所毎に分かれている#######################################

# 相関行列を計算_ground###
combined_ground_table <- cbind(asv_fungi_ground, asv_bacteria_ground)
combined_ground_fa_table <- cbind(asv_fungi_ground, asv_amf_ground)
combined_ground_ba_table <- cbind(asv_bacteria_ground, asv_amf_ground)
##以下、真菌＊細菌用のコード
# 列ごとの標準偏差を計算
sd_cols_ground <- apply(combined_ground_table, 2, sd)
sd_cols_ground_fa <- apply(combined_ground_fa_table, 2, sd)
sd_cols_ground_ba <- apply(combined_ground_ba_table, 2, sd)
# 標準偏差がゼロの列を削除
combined_ground_table_filtered <- combined_ground_table[, sd_cols_ground != 0]
combined_ground_fa_table_filtered <- combined_ground_fa_table[, sd_cols_ground_fa != 0]
combined_ground_ba_table_filtered <- combined_ground_ba_table[, sd_cols_ground_ba != 0]
# 相関行列の計算（スピアマン相関）
correlation_ground_matrix <- cor(combined_ground_table_filtered, method = "spearman")
correlation_ground_fa_matrix <- cor(combined_ground_fa_table_filtered, method = "spearman")
correlation_ground_ba_matrix <- cor(combined_ground_ba_table_filtered, method = "spearman")

# 相関行列を計算_canopy
combined_canopy_table <- cbind(asv_fungi_canopy, asv_bacteria_canopy)
combined_canopy_fa_table <- cbind(asv_fungi_canopy, asv_amf_canopy)
combined_canopy_ba_table <- cbind(asv_bacteria_canopy, asv_amf_canopy)
##以下、真菌＊細菌用のコード
# 列ごとの標準偏差を計算
sd_cols_canopy <- apply(combined_canopy_table, 2, sd)
sd_cols_canopy_fa <- apply(combined_canopy_fa_table, 2, sd)
sd_cols_canopy_ba <- apply(combined_canopy_ba_table, 2, sd)
# 標準偏差がゼロの列を削除
combined_canopy_table_filtered <- combined_canopy_table[, sd_cols_canopy != 0]
combined_canopy_fa_table_filtered <- combined_canopy_fa_table[, sd_cols_canopy_fa != 0]
combined_canopy_ba_table_filtered <- combined_canopy_ba_table[, sd_cols_canopy_ba != 0]
# 相関行列の計算（スピアマン相関）
correlation_canopy_matrix <- cor(combined_canopy_table_filtered, method = "spearman")
correlation_canopy_fa_matrix <- cor(combined_canopy_fa_table_filtered, method = "spearman")
correlation_canopy_ba_matrix <- cor(combined_canopy_ba_table_filtered, method = "spearman")

### 真菌＊細菌 #############################################################################################################################

#####ground#######
#ground
# フィルタ後の真菌とバクテリアの列数を再定義
n_fungi_ground <- ncol(asv_fungi_ground)
n_bacteria_ground <- ncol(asv_bacteria_ground)
n_amf_ground <- ncol(asv_amf_ground)

# フィルタ後のテーブルで真菌とバクテリアの列数を再確認
n_fungi_filtered <- sum(colnames(combined_ground_table_filtered) %in% colnames(asv_fungi_ground))
n_bacteria_filtered <- sum(colnames(combined_ground_table_filtered) %in% colnames(asv_bacteria_ground))

n_amf_filtered <- sum(colnames(combined_ground_fa_table_filtered) %in% colnames(asv_amf_ground))

# これに基づいて、相関行列から正しいインデックスを取得
fungal_bacterial_ground_corr <- correlation_ground_matrix[1:n_fungi_filtered, (n_fungi_filtered+1):(n_fungi_filtered+n_bacteria_filtered)]
fungal_amf_ground_corr <- correlation_ground_fa_matrix[1:n_fungi_filtered, (n_fungi_filtered + 1):ncol(correlation_ground_fa_matrix)]
bacterial_amf_ground_corr <- correlation_ground_ba_matrix[1:n_fungi_filtered, (n_fungi_filtered+1):(n_fungi_filtered+n_amf_filtered)]

# 隣接行列の作成（相関係数が0.4以上
adjacency_ground_fb <- ifelse(fungal_bacterial_ground_corr >= 0.5, 1, 0)
adjacency_ground_fa <- ifelse(fungal_amf_ground_corr >= 0.5, 1, 0)
adjacency_ground_ba <- ifelse(bacterial_amf_ground_corr >= 0.5, 1, 0)
# グラフの作成
g_ground_fb <- graph_from_incidence_matrix(adjacency_ground_fb)
g_ground_fa <- graph_from_incidence_matrix(adjacency_ground_fa)
g_ground_ba <- graph_from_incidence_matrix(adjacency_ground_ba)

# 1. 行名（fungal ASVs）と列名（bacterial ASVs）を取得
fungi_asv_ground_names <- rownames(fungal_bacterial_ground_corr)    # Fungal ASVs の行名
bacteria_asv_ground_names <- colnames(fungal_bacterial_ground_corr) # Bacterial ASVs の列名
amf_asv_ground_names <- colnames(fungal_bacterial_ground_corr) # Bacterial ASVs の列名

# 2. ノード名の設定 (行名と列名を結合して設定)
V(g_ground_fb)$name <- c(fungi_asv_ground_names, bacteria_asv_ground_names)
V(g_ground_fa)$name <- c(fungi_asv_ground_names, bacteria_asv_ground_names)
V(g_ground_ba)$name <- c(fungi_asv_ground_names, bacteria_asv_ground_names)

# 2. fungiの'class' 情報を抽出,Bacterial ASVsの 'class' 情報を取得
taxonomy_fungi_ground_class <- taxonomy_fungi_filtered[rownames(fungal_bacterial_ground_corr), "Class"]
taxonomy_bacteria_ground_class <- taxonomy_bacteria_filtered[bacteria_asv_ground_names, "Class"]

# 3. ユニークな 'class' を取得
unique_fungi_classes <- unique(taxonomy_fungi_ground_class)
unique_bacteria_classes <- unique(taxonomy_bacteria_ground_class)

# 4. 真菌には暖色系パレットを拡張
palette_fungi <- colorRampPalette(brewer.pal(9, "Set1"))(length(unique_fungi_classes))  # "Set1" ベースの拡張パレット
palette_bacteria <- colorRampPalette(brewer.pal(9, "Set3"))(length(unique_bacteria_classes))  # "Set3" ベースの拡張パレット

# 5. 'class' ごとに色を割り当て
class_colors_fungi <- setNames(palette_fungi, unique_fungi_classes)
class_colors_bacteria <- setNames(palette_bacteria, unique_bacteria_classes)

# 6. ノードに色を割り当て
node_colors_fungi <- class_colors_fungi[taxonomy_fungi_ground_class]
node_colors_bacteria <- class_colors_bacteria[taxonomy_bacteria_ground_class]

# 6.5. Fungal ASVsとBacterial ASVsの色を結合
node_colors <- c(node_colors_fungi, node_colors_bacteria)

# 7. ノードの形を設定（真菌は丸、バクテリアは三角）
shapes_fungi <- rep("circle", length(fungi_asv_ground_names))       # 真菌のノードの形
shapes_bacteria <- rep("square", length(bacteria_asv_ground_names))  # バクテリアのノードの形
node_shapes <- c(shapes_fungi, shapes_bacteria)

# 8. エッジのないノードを削除
g_ground_fb <- delete_vertices(g_ground_fb, degree(g_ground_fb) == 0)

# 9. 削除後のノード名を取得
remaining_node_names <- V(g_ground)$name
# 10. 残ったノードに対応する色と形を再設定
remaining_node_colors <- sapply(remaining_node_names, function(node_name) {
  if (node_name %in% fungi_asv_ground_names) {
    return(class_colors_fungi[taxonomy_fungi_ground_class[match(node_name, fungi_asv_ground_names)]])
  } else if (node_name %in% bacteria_asv_ground_names) {
    return(class_colors_bacteria[taxonomy_bacteria_ground_class[match(node_name, bacteria_asv_ground_names)]])
  } else {
    return(NA)  # 該当しない場合はNA
  }
})

# 11. 残ったノードの形を設定
remaining_node_shapes_fungi <- rep("circle", sum(remaining_node_names %in% fungi_asv_ground_names))
remaining_node_shapes_bacteria <- rep("square", sum(remaining_node_names %in% bacteria_asv_ground_names))
remaining_node_shapes <- c(remaining_node_shapes_fungi, remaining_node_shapes_bacteria)

# Fruchterman-Reingold レイアウトを使用してノードを重ならないように配置
layout <- layout_with_fr(g_ground_fb)

# 各ノードの次数を取得
node_degrees <- degree(g_ground_fb)

# ノードのサイズを平方根スケーリングで調整
V(g_ground_fb)$size <- log(node_degrees + 1) * 3  # 対数スケーリングを適用し、倍率を調整

set.seed(10)

# 12. 削除後のノードに色と形を反映させたネットワーク図を描画
plot(g_ground_fb, 
     layout = layout,
     vertex.color = adjustcolor(remaining_node_colors, alpha.f = 0.7),  # ノードの色と透明度
     vertex.size = V(g_ground_fb)$size,  # ノードのサイズ
     vertex.shape = remaining_node_shapes,  # ノードの形を設定
     edge.width = 2,  # エッジの太さ
     vertex.label = NA)  # ノードラベルを非表示

# 各ノードの次数を計算
node_degrees <- degree(g_ground_fb)

# ノード名と次数をデータフレームにまとめる
node_degree_df <- data.frame(
  Node = V(g_ground_fb)$name,  # ノード名
  Degree = node_degrees  # 次数
)

# 次数で降順に並べ替える
node_degree_df <- node_degree_df[order(-node_degree_df$Degree), ]

# 上位のノードを確認する
print(head(node_degree_df))  # 上位ノードを確認（必要に応じてhead()の引数で個数を調整）

# 必要に応じてデータフレームを保存
write.csv(node_degree_df, "node_degree_ground_f*b_ranking.csv", row.names = FALSE)

# taxonomy_bacteria_filteredの一番右の列を削除
taxonomy_fungi_filtered_trimmed <- taxonomy_fungi_filtered[, -ncol(taxonomy_fungi_filtered)]
# タクソノミー情報を結合
taxonomy_combined <- rbind(taxonomy_fungi_filtered_trimmed, taxonomy_bacteria_filtered)
# 'Node'列に基づいて、タクソノミー情報を結合
node_degree_with_taxonomy <- node_degree_df %>%
  left_join(taxonomy_combined, by = c("Node" = "row.names"))  # ASV名で結合
# taxonomy_combinedに行名をASV列として追加
taxonomy_combined_with_asv <- taxonomy_combined %>%
  rownames_to_column(var = "ASV")
# node_degree_dfとtaxonomy_combined_with_asvをASV名で結合
node_degree_with_taxonomy <- node_degree_df %>%
  left_join(taxonomy_combined_with_asv, by = c("Node" = "ASV"))  # ASV名で結合
# タクソノミー情報が追加されたデータフレームを確認
print(head(node_degree_with_taxonomy))
# 必要に応じてCSVファイルとして保存
write.csv(node_degree_with_taxonomy, "node_degree_ground_f*b_ranking_with_taxonomy.csv", row.names = FALSE)


#####Module解析###############
# 二部グラフのプロジェクションを作成
projection_result <- bipartite_projection(g_ground_fb)
# プロジェクション結果を確認
fungi_projection <- projection_result$proj1  # 真菌側のプロジェクション
bacteria_projection <- projection_result$proj2  # バクテリア側のプロジェクション
# プロジェクションが正しく作成されたか確認
print(class(fungi_projection))  # "igraph" が返ってくるか確認
# Louvain法によるモジュール検出（真菌プロジェクション）
fungi_clusters <- cluster_louvain(fungi_projection)
# Louvain法によるモジュール検出（バクテリアプロジェクション）
bacteria_clusters <- cluster_louvain(bacteria_projection)
# 二部グラフ全体に対してLouvain法を適用する
bipartite_clusters <- cluster_louvain(g_ground_fb)
# モジュール度（modularity）の計算
modularity_fungi <- modularity(fungi_clusters)
modularity_bacteria <- modularity(bacteria_clusters)
modularity_bipartite <- modularity(bipartite_clusters)

# 結果を表示
print(modularity_fungi)
print(modularity_bacteria)
print(modularity_bipartite)

# グラフのプロット（コミュニティごとの色分けも加える）
plot(g_ground_fb, 
     layout = layout,  # レイアウト指定
     vertex.color = membership(bipartite_clusters),  # コミュニティごとの色分け
     vertex.size = V(g_ground_fb)$size,  # ノードサイズ
     vertex.shape = remaining_node_shapes,  # ノードの形を指定
     edge.width = 2,  # エッジの太さ
     vertex.label = NA)  # ノードラベルは非表示


#####重み結合度等の計算！"bipartite"を使うので、igraphを使い終わってから立ち上げる！############
library(bipartite)
library(igraph)
# 観測されたネットワークの結合度、入れ子度、モジュール度、H2’の計算
observed_connectance <- networklevel(as_incidence_matrix(g_ground_fb), index = "connectance")
observed_nodf <- nested(as_incidence_matrix(g_ground_fb), method = "NODF")
observed_modularity <- modularity(bipartite_clusters)
#observed_h2 <- H2fun(as_incidence_matrix(g_ground_fb), H2_integer = TRUE)

# ノード数とエッジ数を指定
num_nodes <- vcount(g_ground_fb)  # 真菌とバクテリアを合わせたノード数
num_edges <- ecount(g_ground_fb)  # エッジ数

# 指標を格納するためのベクトルを作成
random_connectance <- numeric(100)
random_nodf <- numeric(100)
random_modularity <- numeric(100)
random_h2 <- numeric(100)

set.seed(123)  # 再現性のためのシード設定

for (i in 1:100) {
  # ランダムなネットワークを生成（エッジ数を指定）
  random_graph <- erdos.renyi.game(num_nodes, num_edges, type = "gnm")
  
  # 隣接行列を取得
  adjacency_matrix <- as_adjacency_matrix(random_graph, sparse = FALSE)
  
  # ランダムネットワークの指標を計算
  random_connectance[i] <- networklevel(adjacency_matrix, index = "connectance")
  random_nodf[i] <- nested(adjacency_matrix, method = "NODF")
  random_modularity[i] <- modularity(cluster_louvain(random_graph))
  #random_h2[i] <- H2fun(adjacency_matrix, H2_integer = TRUE)$H2
}

# ランダムネットワークの平均と標準偏差を計算
mean_random_connectance <- mean(random_connectance)
sd_random_connectance <- sd(random_connectance)
mean_random_nodf <- mean(random_nodf)
sd_random_nodf <- sd(random_nodf)
mean_random_modularity <- mean(random_modularity)
sd_random_modularity <- sd(random_modularity)
#mean_random_h2 <- mean(random_h2)
#sd_random_h2 <- sd(random_h2)

# zスコアの計算
z_connectance <- (observed_connectance - mean_random_connectance) / sd_random_connectance
z_nodf <- (observed_nodf - mean_random_nodf) / sd_random_nodf
z_modularity <- (observed_modularity - mean_random_modularity) / sd_random_modularity
#z_h2 <- (observed_h2["H2"] - mean_random_h2) / sd_random_h2

# p値の計算（片側検定）
p_connectance <- 2 * (1 - pnorm(abs(z_connectance)))
p_nodf <- 2 * (1 - pnorm(abs(z_nodf)))
p_modularity <- 2 * (1 - pnorm(abs(z_modularity)))
#p_h2 <- 2 * (1 - pnorm(abs(z_h2)))

# 結果の表示
cat("Connectance: zスコア =", z_connectance, ", p値 =", format(p_connectance, scientific = TRUE), "\n")
cat("NODF: zスコア =", z_nodf, ", p値 =", format(p_nodf, scientific = TRUE), "\n")
cat("Modularity: zスコア =", z_modularity, ", p値 =", format(p_modularity, scientific = TRUE), "\n")
#cat("H2': zスコア =", z_h2, ", p値 =", p_h2, "\n")

###canopy####
# フィルタ後の真菌とバクテリアの列数を再定義
n_fungi_canopy <- ncol(asv_fungi_canopy)
n_bacteria_canopy <- ncol(asv_bacteria_canopy)

# フィルタ後のテーブルで真菌とバクテリアの列数を再確認
n_fungi_filtered <- sum(colnames(combined_canopy_table_filtered) %in% colnames(asv_fungi_canopy))
n_bacteria_filtered <- sum(colnames(combined_canopy_table_filtered) %in% colnames(asv_bacteria_canopy))

# これに基づいて、相関行列から正しいインデックスを取得
fungal_bacterial_canopy_corr <- correlation_canopy_matrix[1:n_fungi_filtered, (n_fungi_filtered+1):(n_fungi_filtered+n_bacteria_filtered)]

# 隣接行列の作成（相関係数が0.4以上）
adjacency_canopy_fb <- ifelse(fungal_bacterial_canopy_corr >= 0.7, 1, 0)

# グラフの作成
g_canopy_fb <- graph_from_incidence_matrix(adjacency_canopy_fb)
# 1. 行名（fungal ASVs）と列名（bacterial ASVs）を取得
fungi_asv_canopy_names <- rownames(fungal_bacterial_canopy_corr)    # Fungal ASVs の行名
bacteria_asv_canopy_names <- colnames(fungal_bacterial_canopy_corr) # Bacterial ASVs の列名
# 2. ノード名の設定 (行名と列名を結合して設定)
V(g_canopy_fb)$name <- c(fungi_asv_canopy_names, bacteria_asv_canopy_names)

# 2. fungiの'class' 情報を抽出,Bacterial ASVsの 'class' 情報を取得
taxonomy_fungi_canopy_class <- taxonomy_fungi_filtered[rownames(fungal_bacterial_canopy_corr), "Class"]
taxonomy_bacteria_canopy_class <- taxonomy_bacteria_filtered[bacteria_asv_canopy_names, "Class"]

# 3. ユニークな 'class' を取得
unique_fungi_classes <- unique(taxonomy_fungi_canopy_class)
unique_bacteria_classes <- unique(taxonomy_bacteria_canopy_class)

# 4. 真菌には暖色系パレットを拡張
palette_fungi <- colorRampPalette(brewer.pal(9, "Set1"))(length(unique_fungi_classes))  # "Set1" ベースの拡張パレット
palette_bacteria <- colorRampPalette(brewer.pal(9, "Set3"))(length(unique_bacteria_classes))  # "Set3" ベースの拡張パレット

# 5. 'class' ごとに色を割り当て
class_colors_fungi <- setNames(palette_fungi, unique_fungi_classes)
class_colors_bacteria <- setNames(palette_bacteria, unique_bacteria_classes)

# 6. ノードに色を割り当て
node_colors_fungi <- class_colors_fungi[taxonomy_fungi_canopy_class]
node_colors_bacteria <- class_colors_bacteria[taxonomy_bacteria_canopy_class]

# 6.5. Fungal ASVsとBacterial ASVsの色を結合
node_colors <- c(node_colors_fungi, node_colors_bacteria)

# 7. ノードの形を設定（真菌は丸、バクテリアは三角）
shapes_fungi <- rep("circle", length(fungi_asv_canopy_names))       # 真菌のノードの形
shapes_bacteria <- rep("square", length(bacteria_asv_canopy_names))  # バクテリアのノードの形
node_shapes <- c(shapes_fungi, shapes_bacteria)

# 8. エッジのないノードを削除
g_canopy_fb <- delete_vertices(g_canopy_fb, degree(g_canopy_fb) == 0)
 
# 9. 削除後のノード名を取得
remaining_node_names <- V(g_canopy_fb)$name
# 10. 残ったノードに対応する色と形を再設定
remaining_node_colors <- sapply(remaining_node_names, function(node_name) {
  if (node_name %in% fungi_asv_canopy_names) {
    return(class_colors_fungi[taxonomy_fungi_canopy_class[match(node_name, fungi_asv_canopy_names)]])
  } else if (node_name %in% bacteria_asv_canopy_names) {
    return(class_colors_bacteria[taxonomy_bacteria_canopy_class[match(node_name, bacteria_asv_canopy_names)]])
  } else {
    return(NA)  # 該当しない場合はNA
  }
})
 
# 11. 残ったノードの形を設定
remaining_node_shapes_fungi <- rep("circle", sum(remaining_node_names %in% fungi_asv_canopy_names))
remaining_node_shapes_bacteria <- rep("square", sum(remaining_node_names %in% bacteria_asv_canopy_names))
remaining_node_shapes <- c(remaining_node_shapes_fungi, remaining_node_shapes_bacteria)

# Fruchterman-Reingold レイアウトを使用してノードを重ならないように配置
layout <- layout_with_fr(g_canopy_fb)

# 各ノードの次数を取得
node_degrees <- degree(g_canopy_fb)

# 対数スケーリングでノードサイズを調整
V(g_canopy_fb)$size <- log(node_degrees + 1) * 3  # 対数スケーリングを適用し、倍率を調整

set.seed(10)
 
# 12. 削除後のノードに色と形を反映させたネットワーク図を描画
plot(g_canopy_fb, 
     layout = layout,  # レイアウトを指定
     vertex.color = adjustcolor(remaining_node_colors, alpha.f = 0.7),  # ノードの色と透明度
     vertex.size = V(g_canopy_fb)$size,  # ノードのサイズ
     vertex.shape = remaining_node_shapes,  # ノードの形を設定
     edge.width = 2,  # エッジの太さ
     vertex.label = NA)  # ノードラベルを非表示

# 各ノードの次数を計算
node_degrees <- degree(g_canopy_fb)

# ノード名と次数をデータフレームにまとめる
node_degree_df <- data.frame(
  Node = V(g_canopy_fb)$name,  # ノード名
  Degree = node_degrees  # 次数
)

# 次数で降順に並べ替える
node_degree_df <- node_degree_df[order(-node_degree_df$Degree), ]

# 上位のノードを確認する
print(head(node_degree_df))  # 上位ノードを確認（必要に応じてhead()の引数で個数を調整）

# 必要に応じてデータフレームを保存
write.csv(node_degree_df, "node_degree_canopy_f*b_ranking.csv", row.names = FALSE)

# node_degree_dfとtaxonomy_combined_with_asvをASV名で結合
node_degree_with_taxonomy <- node_degree_df %>%
  left_join(taxonomy_combined_with_asv, by = c("Node" = "ASV"))  # ASV名で結合
# タクソノミー情報が追加されたデータフレームを確認
print(head(node_degree_with_taxonomy))
# 必要に応じてCSVファイルとして保存
write.csv(node_degree_with_taxonomy, "node_degree_canopy_f*b_ranking_with_taxonomy.csv", row.names = FALSE)

#####Module解析###############
# 二部グラフのプロジェクションを作成  
projection_result <- bipartite_projection(g_canopy_fb)
# プロジェクション結果を確認
fungi_projection <- projection_result$proj1  # 真菌側のプロジェクション
bacteria_projection <- projection_result$proj2  # バクテリア側のプロジェクション
# プロジェクションが正しく作成されたか確認
print(class(fungi_projection))  # "igraph" が返ってくるか確認
# Louvain法によるモジュール検出（真菌プロジェクション）
fungi_clusters <- cluster_louvain(fungi_projection)
# Louvain法によるモジュール検出（バクテリアプロジェクション）
bacteria_clusters <- cluster_louvain(bacteria_projection)
# 二部グラフ全体に対してLouvain法を適用する
bipartite_clusters <- cluster_louvain(g_canopy_fb)
# モジュール度（modularity）の計算
modularity_fungi <- modularity(fungi_clusters)
modularity_bacteria <- modularity(bacteria_clusters)
modularity_bipartite <- modularity(bipartite_clusters)

# 結果を表示
print(modularity_fungi)
print(modularity_bacteria)
print(modularity_bipartite)

# グラフのプロット（コミュニティごとの色分けも加える）
plot(g_canopy_fb, 
     layout = layout,  # レイアウト指定
     vertex.color = membership(bipartite_clusters),  # コミュニティごとの色分け
     vertex.size = V(g_canopy_fb)$size,  # ノードサイズ
     vertex.shape = remaining_node_shapes,  # ノードの形を指定
     edge.width = 2,  # エッジの太さ
     vertex.label = NA)  # ノードラベルは非表示

#####重み結合度等の計算！"bipartite"を使うので、igraphを使い終わってから立ち上げる！############
# weighted connectance の計算
# igraphオブジェクトから隣接行列を抽出
# 重み付き結合度の計算
weighted_connectance <- networklevel(adjacency_canopy_fb, index = "connectance", weighted = TRUE)
print(weighted_connectance)
# 入れ子度（NODF）の計算
weighted_nodf <- nested(adjacency_canopy_fb, method = "NODF")
print(weighted_nodf)
# 隣接行列の重みの正規化
adjacency_matrix_normalized <- adjacency_canopy_fb / max(adjacency_canopy_fb)
weighted_nodf <- nested(adjacency_matrix_normalized, method = "NODF")
print(weighted_nodf)
# モジュール度の計算
module_result <- computeModules(adjacency_canopy_fb)
modularity_value <- module_result@likelihood
print(modularity_value)
# 相互作用特殊化度 (H2') の計算
H2_value <- H2fun(adjacency_canopy_fb, H2_integer = FALSE)  # H2_integer は整数行列かどうかの指定
print(H2_value)

### 真菌＊AMF #############################################################################################################################

#####ground#######
#ground
# フィルタ後の真菌とバクテリアの列数を再定義
n_fungi_ground <- ncol(asv_fungi_ground)
n_bacteria_ground <- ncol(asv_bacteria_ground)
n_amf_ground <- ncol(asv_amf_ground)

# フィルタ後のテーブルで真菌とバクテリアの列数を再確認
n_fungi_fa_filtered <- sum(colnames(combined_ground_fa_table_filtered) %in% colnames(asv_fungi_ground))
n_amf_fa_filtered <- sum(colnames(combined_ground_fa_table_filtered) %in% colnames(asv_amf_ground))

# これに基づいて、相関行列から正しいインデックスを取得
fungal_amf_ground_corr <- correlation_ground_fa_matrix[1:n_fungi_fa_filtered, (n_fungi_fa_filtered + 1):ncol(correlation_ground_fa_matrix)]

# 隣接行列の作成（相関係数が0.4以上
adjacency_ground_fa <- ifelse(fungal_amf_ground_corr >= 0.6, 1, 0)
# グラフの作成
g_ground_fa <- graph_from_incidence_matrix(adjacency_ground_fa)

# 1. 行名（fungal ASVs）と列名（bacterial ASVs）を取得
fungi_asv_ground_names <- rownames(fungal_amf_ground_corr)    # Fungal ASVs の行名
amf_asv_ground_names <- colnames(fungal_amf_ground_corr) # Bacterial ASVs の列名

# 2. ノード名の設定 (行名と列名を結合して設定)
V(g_ground_fa)$name <- c(fungi_asv_ground_names, amf_asv_ground_names)

# 2. fungiの'class' 情報を抽出,Bacterial ASVsの 'class' 情報を取得
taxonomy_fungi_ground_class <- taxonomy_fungi_filtered[rownames(fungal_bacterial_ground_corr), "Class"]
taxonomy_amf_ground_class <- taxonomy_amf_filtered[amf_asv_ground_names, "Class"]

# 3. ユニークな 'class' を取得
unique_fungi_classes <- unique(taxonomy_fungi_ground_class)
unique_amf_classes <- unique(taxonomy_amf_ground_class)

# 4. 真菌には暖色系パレットを拡張
palette_fungi <- colorRampPalette(brewer.pal(9, "Set1"))(length(unique_fungi_classes))  # "Set1" ベースの拡張パレット
palette_amf <- colorRampPalette(brewer.pal(9, "Set3"))(length(unique_amf_classes))  # "Set3" ベースの拡張パレット

# 5. 'class' ごとに色を割り当て
class_colors_fungi <- setNames(palette_fungi, unique_fungi_classes)
class_colors_amf <- setNames(palette_amf, unique_amf_classes)

# 6. ノードに色を割り当て
node_colors_fungi <- class_colors_fungi[taxonomy_fungi_ground_class]
node_colors_amf <- class_colors_amf[taxonomy_amf_ground_class]

# 6.5. Fungal ASVsとBacterial ASVsの色を結合
node_colors <- c(node_colors_fungi, node_colors_amf)

# 7. ノードの形を設定（真菌は丸、バクテリアは三角）
shapes_fungi <- rep("circle", length(fungi_asv_ground_names))       # 真菌のノードの形
shapes_amf <- rep("square", length(amf_asv_ground_names))  # バクテリアのノードの形
node_shapes <- c(shapes_fungi, shapes_amf)

# 8. エッジのないノードを削除
g_ground_fa <- delete_vertices(g_ground_fa, degree(g_ground_fa) == 0)

# 9. 削除後のノード名を取得
remaining_node_names <- V(g_ground_fa)$name
# 10. 残ったノードに対応する色と形を再設定
remaining_node_colors <- sapply(remaining_node_names, function(node_name) {
  if (node_name %in% fungi_asv_ground_names) {
    return(class_colors_fungi[taxonomy_fungi_ground_class[match(node_name, fungi_asv_ground_names)]])
  } else if (node_name %in% amf_asv_ground_names) {
    return(class_colors_amf[taxonomy_amf_ground_class[match(node_name, amf_asv_ground_names)]])
  } else {
    return(NA)  # 該当しない場合はNA
  }
})

# 11. 残ったノードの形を設定
remaining_node_shapes_fungi <- rep("circle", sum(remaining_node_names %in% fungi_asv_ground_names))
remaining_node_shapes_amf <- rep("square", sum(remaining_node_names %in% amf_asv_ground_names))
remaining_node_shapes <- c(remaining_node_shapes_fungi, remaining_node_shapes_amf)

# Fruchterman-Reingold レイアウトを使用してノードを重ならないように配置
layout <- layout_with_fr(g_ground_fa)

# 各ノードの次数を取得
node_degrees <- degree(g_ground_fa)

# ノードのサイズを平方根スケーリングで調整
V(g_ground_fa)$size <- log(node_degrees + 1) * 3  # 対数スケーリングを適用し、倍率を調整

set.seed(10)

# 12. 削除後のノードに色と形を反映させたネットワーク図を描画
plot(g_ground_fa, 
     layout = layout,
     vertex.color = adjustcolor(remaining_node_colors, alpha.f = 0.7),  # ノードの色と透明度
     vertex.size = V(g_ground_fa)$size,  # ノードのサイズ
     vertex.shape = remaining_node_shapes,  # ノードの形を設定
     edge.width = 2,  # エッジの太さ
     vertex.label = NA)  # ノードラベルを非表示

# 各ノードの次数を計算
node_degrees <- degree(g_ground_fa)

# ノード名と次数をデータフレームにまとめる
node_degree_df <- data.frame(
  Node = V(g_ground_fa)$name,  # ノード名
  Degree = node_degrees  # 次数
)

# 次数で降順に並べ替える
node_degree_df <- node_degree_df[order(-node_degree_df$Degree), ]

# 上位のノードを確認する
print(head(node_degree_df))  # 上位ノードを確認（必要に応じてhead()の引数で個数を調整）

# 必要に応じてデータフレームを保存
write.csv(node_degree_df, "node_degree_ground_f*a_0.6_ranking.csv", row.names = FALSE)

# taxonomy_amf_filteredの一番右の列を削除
#taxonomy_amf_filtered_trimmed <- taxonomy_amf_filtered[, -ncol(taxonomy_amf_filtered)]
# タクソノミー情報を結合
taxonomy_combined <- rbind(taxonomy_fungi_filtered, taxonomy_amf_filtered)
# 'Node'列に基づいて、タクソノミー情報を結合
node_degree_with_taxonomy <- node_degree_df %>%
  left_join(taxonomy_combined, by = c("Node" = "row.names"))  # ASV名で結合
# taxonomy_combinedに行名をASV列として追加
taxonomy_combined_with_asv <- taxonomy_combined %>%
  rownames_to_column(var = "ASV")
# node_degree_dfとtaxonomy_combined_with_asvをASV名で結合
node_degree_with_taxonomy <- node_degree_df %>%
  left_join(taxonomy_combined_with_asv, by = c("Node" = "ASV"))  # ASV名で結合
# タクソノミー情報が追加されたデータフレームを確認
print(head(node_degree_with_taxonomy))
# 必要に応じてCSVファイルとして保存
write.csv(node_degree_with_taxonomy, "node_degree_ground_f*a_0.6_ranking_with_taxonomy.csv", row.names = FALSE)


#####Module解析###############
# 二部グラフのプロジェクションを作成
projection_result <- bipartite_projection(g_ground_fa)
# プロジェクション結果を確認
fungi_projection <- projection_result$proj1  # 真菌側のプロジェクション
amf_projection <- projection_result$proj2  # amf側のプロジェクション
# プロジェクションが正しく作成されたか確認
print(class(fungi_projection))  # "igraph" が返ってくるか確認
# Louvain法によるモジュール検出（真菌プロジェクション）
fungi_clusters <- cluster_louvain(fungi_projection)
# Louvain法によるモジュール検出（バクテリアプロジェクション）
amf_clusters <- cluster_louvain(amf_projection)
# 二部グラフ全体に対してLouvain法を適用する
bipartite_clusters <- cluster_louvain(g_ground_fa)
# モジュール度（modularity）の計算
modularity_fungi <- modularity(fungi_clusters)
modularity_amf <- modularity(amf_clusters)
modularity_bipartite <- modularity(bipartite_clusters)

# 結果を表示
print(modularity_fungi)
print(modularity_amf)
print(modularity_bipartite)

# グラフのプロット（コミュニティごとの色分けも加える）
plot(g_ground_fa, 
     layout = layout,  # レイアウト指定
     vertex.color = membership(bipartite_clusters),  # コミュニティごとの色分け
     vertex.size = V(g_ground_fa)$size,  # ノードサイズ
     vertex.shape = remaining_node_shapes,  # ノードの形を指定
     edge.width = 2,  # エッジの太さ
     vertex.label = NA)  # ノードラベルは非表示


#####重み結合度等の計算！"bipartite"を使うので、igraphを使い終わってから立ち上げる！############
library(bipartite)
library(igraph)
# 観測されたネットワークの結合度、入れ子度、モジュール度、H2’の計算
observed_connectance <- networklevel(as_incidence_matrix(g_ground_fa), index = "connectance")
observed_nodf <- nested(as_incidence_matrix(g_ground_fa), method = "NODF")
observed_modularity <- modularity(bipartite_clusters)
observed_h2 <- H2fun(as_incidence_matrix(g_ground_fa), H2_integer = TRUE)

# ノード数とエッジ数を指定
num_nodes <- vcount(g_ground_fa)  # 真菌とバクテリアを合わせたノード数
num_edges <- ecount(g_ground_fa)  # エッジ数

# 指標を格納するためのベクトルを作成
random_connectance <- numeric(100)
random_nodf <- numeric(100)
random_modularity <- numeric(100)
random_h2 <- numeric(100)

set.seed(130)  # 再現性のためのシード設定

for (i in 1:100) {
  # ランダムなネットワークを生成（エッジ数を指定）
  random_graph <- erdos.renyi.game(num_nodes, num_edges, type = "gnm")
  
  # 隣接行列を取得
  adjacency_matrix <- as_adjacency_matrix(random_graph, sparse = FALSE)
  
  # ランダムネットワークの指標を計算
  random_connectance[i] <- networklevel(adjacency_matrix, index = "connectance")
  random_nodf[i] <- nested(adjacency_matrix, method = "NODF")
  random_modularity[i] <- modularity(cluster_louvain(random_graph))
  #random_h2[i] <- H2fun(adjacency_matrix, H2_integer = TRUE)$H2
}

# ランダムネットワークの平均と標準偏差を計算
mean_random_connectance <- mean(random_connectance)
sd_random_connectance <- sd(random_connectance)
mean_random_nodf <- mean(random_nodf)
sd_random_nodf <- sd(random_nodf)
mean_random_modularity <- mean(random_modularity)
sd_random_modularity <- sd(random_modularity)
#mean_random_h2 <- mean(random_h2)
#sd_random_h2 <- sd(random_h2)

# zスコアの計算
z_connectance <- (observed_connectance - mean_random_connectance) / sd_random_connectance
z_nodf <- (observed_nodf - mean_random_nodf) / sd_random_nodf
z_modularity <- (observed_modularity - mean_random_modularity) / sd_random_modularity
#z_h2 <- (observed_h2["H2"] - mean_random_h2) / sd_random_h2

# p値の計算（片側検定）
p_connectance <- 2 * (1 - pnorm(abs(z_connectance)))
p_nodf <- 2 * (1 - pnorm(abs(z_nodf)))
p_modularity <- 2 * (1 - pnorm(abs(z_modularity)))
#p_h2 <- 2 * (1 - pnorm(abs(z_h2)))

# 結果の表示
cat("Connectance: zスコア =", z_connectance, ", p値 =", format(p_connectance, scientific = TRUE), "\n")
cat("NODF: zスコア =", z_nodf, ", p値 =", format(p_nodf, scientific = TRUE), "\n")
cat("Modularity: zスコア =", z_modularity, ", p値 =", format(p_modularity, scientific = TRUE), "\n")
#cat("H2': zスコア =", z_h2, ", p値 =", p_h2, "\n")
