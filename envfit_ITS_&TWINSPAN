library(ggplot2)
library(vegan)
library(ggrepel)

setwd("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/ITS")
METADATA <- read.csv("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/ITS/extracted_with_N_ITS_fixed.csv",row.names=1,header = T)
METADATA <- METADATA[,-c(6,8,10,12,14)]
ASV.table <- read.table("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/ITS/extracted_ASV_table_with_N_ITS.txt",header = T)
#METADATA <- METADATA[,1:(ncol(METADATA)-26)] #加えた

# % table
ASV <- ASV.table [,1:(ncol(ASV.table)-7)]
taxonomy <- ASV.table [,(ncol(ASV.table)-6):ncol(ASV.table)]
percent <- ASV / mean(colSums(ASV)) *100
# Remove "k__", "p__" and "c__" before phylum name
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="k__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="p__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="c__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="o__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="f__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="g__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="s__", replacement = "", x)}),stringsAsFactors = FALSE)
rownames(taxonomy) <- rownames(ASV)  # 行名を元の行名で設定

# Make Kingdom table
kingdom <- aggregate(percent, by=list(taxonomy$Kingdom),FUN = sum,na.rm=F) 
row.names(kingdom)<-kingdom [,1]
kingdom <- kingdom[,-1]
kingdom <- data.frame(kingdom)
kingdom.t <- t (kingdom)

# Make >1% Phylum table
phylum <- aggregate(percent, by=list(taxonomy$Phylum),FUN = sum,na.rm=F) 
row.names(phylum)<-phylum[,1]
phylum <- phylum[,-1]
phylum <- data.frame(phylum)
rowMeans <- rowMeans(phylum) 
phylum <- cbind(phylum,rowMeans)
major.phylum <- phylum[phylum[,"rowMeans"] > 1,]
major.phylum <- major.phylum[,-ncol(major.phylum)] 
major.phylum.t <- t (major.phylum)

# Make >1% Class (in >10% phylum) table
percent.table <- cbind (percent, taxonomy)
more.major.phylum <- phylum[phylum[,"rowMeans"] > 10,]
more.major.phylum.t <- t(more.major.phylum)
class.table <- data.frame()
for (i in 1: ncol (more.major.phylum.t)){
  class.subset <- subset (percent.table, Phylum = colnames(more.major.phylum.t)[i])
  class.table <- rbind (class.table, class.subset)}
class.ASV <- class.table[,1:(ncol(class.table)-7)]
class.taxonomy <- class.table[,(ncol(class.table)-6):ncol(class.table)]
class <- aggregate(class.ASV, by=list(class.taxonomy$Class),FUN = sum,na.rm=F) 
row.names(class)<-class[,1]
class <- class[,-1]
class <- data.frame(class)
rowMeans <- rowMeans(class) 
class <- cbind(class,rowMeans)
major.class <- class[class[,"rowMeans"] > 1,]
major.class <- major.class[,-ncol(major.class)] 
major.class.t <- t (major.class)

# nmds
percent.t <- t (percent)
nmds <-metaMDS(percent.t, trace=F, distance="bray")
env.fit<-envfit(nmds, METADATA, perm=10000, na.rm=TRUE)
kingdom.fit<-envfit(nmds, kingdom.t, perm=10000)
phylum.fit<-envfit(nmds, major.phylum.t, perm=10000)
class.fit<-envfit(nmds, major.class.t, perm=10000)

#Make dataset
data <- cbind(nmds$points,METADATA[,1:(ncol(METADATA)-5)])
env.values <- (env.fit$vectors[1]$arrows)
pval <- (env.fit$vectors[4]$pvals)
env.arrows <- cbind (env.values, pval)
env.arrows <- data.frame(subset (env.arrows, pval < 0.05))
kingdom.values <- (kingdom.fit$vectors[1]$arrows)
pval <- (kingdom.fit$vectors[4]$pvals)
kingdom.arrows <- cbind (kingdom.values, pval)
kingdom.arrows <- data.frame(subset (kingdom.arrows, pval < 0.05))
phylum.values <- (phylum.fit$vectors[1]$arrows)
pval <- (phylum.fit$vectors[4]$pvals)
phylum.arrows <- cbind (phylum.values, pval)
phylum.arrows <- data.frame(subset (phylum.arrows, pval < 0.05))
class.values <- (class.fit$vectors[1]$arrows)
pval <- (class.fit$vectors[4]$pvals)
class.arrows <- cbind (class.values, pval)
class.arrows <- data.frame(subset (class.arrows, pval < 0.05))



# ggplot
rate = 1 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  scale_color_brewer(palette = "Set2")+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  geom_text_repel(data=env.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(env.arrows)),  size=4, color="black") +
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  geom_text_repel(data=phylum.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(phylum.arrows)),  size=4, color="#404040") +
  geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "0226_ITS_everything_.png")


#without_words
rate = 1 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  scale_color_brewer(palette = "Set2")+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  coord_fixed()

# Save
ggsave(file = "0226_ITS_everything_without_words.png")

# ggplot_class_only
rate = 1 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  scale_color_brewer(palette = "Set2")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  geom_text_repel(data=phylum.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(phylum.arrows)), size=4, color="#404040") +
  geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "0226_ITS_only_class.png")

# without_words
rate = 1 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  scale_color_brewer(palette = "Set2")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "0226_ITS_only_class_without_words.png")


# ggplot_scores_only
rate = 1 # how many times shorter than acctual arrows
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  scale_color_brewer(palette = "Set2")+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_text_repel(data=env.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(env.arrows)),  size=4, color="black") +
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "ITS_scores_only_0226.png")

# without_words
rate = 1 # how many times shorter than acctual arrows
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  scale_color_brewer(palette = "Set2")+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "ITS_scores_only_without_words_0226.png")

#view a stress score
nmds$stress

write.csv(class.arrows,"class.arrows.csv")
write.csv(class.values,"class.values.csv")
write.csv(phylum.arrows,"phylum.arrows.csv")
write.csv(phylum.values,"phylum.values.csv")
write.csv(kingdom.arrows,"kingdom.arrows.csv")
write.csv(kingdom.values,"kingdom.values.csv")
write.csv(env.arrows,"env.arrows.csv")
write.csv(env.values,"env.values.csv")
write.csv(data,"data.csv")

ASV.t <- t(ASV)
adonis <- adonis(ASV.t ~ site, data=METADATA, permutations=10000)

# Save
Fval <- adonis[[1]][,4]
R2 <- adonis[[1]][,5]
Pval <-adonis[[1]][,6]
bind <- cbind(Fval, R2, Pval)
rownames (bind) <- rownames(adonis[[1]])                 

write.csv (bind, "PerMANOVA.csv")


#delete column
df.koki <- read.table("/Users/forestry/Desktop/sueyoshi/for_r/data_YAKUSHIMA/results/for_ITS/rarefied_ASV_table.txt",header = T)
df.koki <- df.koki[,-c(2,4,6,7,9,10,22,24,35,36,37,43,46,47,56,60,62,64)]
write.table(df.koki,file="extracted_ASV_table_with_N_ITS.txt")

df.koki2 <- read.csv("~/Desktop/sueyoshi/for_r/data_YAKUSHIMA/for_envfit/ITS/extracted_metadata/with_N_ITS.csv",header = T)
df.koki2 <- df.koki2[-51:-56,]
write.csv(df.koki2,file="extracted_with_N_ITS_fixed.csv")

#####################################################################################################################
#########TWINSPAN用#####################################################################################################################

library(ggplot2)
library(vegan)
library(ggrepel)

setwd("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/ITS")
METADATA <- read.csv("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/ITS/extracted_with_N_ITS_fixed.csv",row.names=1,header = T)
METADATA <- METADATA[,-c(6,8,10,12,14)]
ASV.table <- read.table("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/ITS/20241213ericoid/rarefied_ericoid_ASV_table.txt",header = T)
#delete column
#ASV.table <- ASV.table[,-c(11,12,13,19,22,23,32,36,38,40)]

# % table
ASV <- ASV.table [,1:(ncol(ASV.table)-7)]
percent <- ASV / mean(colSums(ASV)) *100

rownames(ASV) <- paste("ericoid", rownames(ASV), sep = "_")
rownames(percent) <- paste("ericoid", rownames(percent), sep = "_")

# 50個のサンプル名を作成
# 指定された50個の番号をベクトルとして用意
selected_numbers <- c(1, 3, 5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 
                      29, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 
                      54, 55, 57, 58, 59, 61, 63, 65, 66, 67, 68)
# 選択した番号に基づいて新しい行名を作成
new_names <- paste0("CSM_", sprintf("%02d", selected_numbers))
rownames(METADATA) <- new_names
selected_numbers <- c(25, 26, 27, 28, 
                      29, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 
                      54, 55, 57, 58, 59, 61, 63, 65, 66, 67, 68)
new_names <- paste0("CSM_", sprintf("%02d", selected_numbers))
colnames(ASV) <- new_names
colnames(percent) <- new_names

canopyDATA <- rownames(METADATA[METADATA$site == "canopy", ])
ASV <- ASV[,canopyDATA]
ASV <- ASV[,!colnames(ASV) %in% c("CSM_30","CSM_34","CSM_36","CSM_46","CSM_64") ]
percent <- percent[,canopyDATA]
percent <- percent[,!colnames(percent) %in% c("CSM_30","CSM_34","CSM_36","CSM_46","CSM_64") ]
canopy_METADATA <- METADATA[canopyDATA, ]
canopy_METADATA <- canopy_METADATA[!rownames(canopy_METADATA) %in% c("CSM_30","CSM_34","CSM_36","CSM_46","CSM_64"), ]

taxonomy <- ASV.table [,(ncol(ASV.table)-6):ncol(ASV.table)]
# Remove "k__", "p__" and "c__" before phylum name
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="k__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="p__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="c__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="o__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="f__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="g__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="s__", replacement = "", x)}),stringsAsFactors = FALSE)
rownames(taxonomy) <- rownames(ASV)  # 行名を元の行名で設定

# グループごとの行名を定義
# グループごとの行名を定義
group_A <- c(25, 26, 27, 28, 29, 31, 32, 33, 42, 48, 49, 50, 51, 52, 58, 67, 68)
group_B <- c(53, 54, 55, 57, 59, 61)
group_C <- c(38, 40, 41, 65, 66)
group_D <- c(39, 44, 45, 63)

# `CSM_` を付けて行名を作成
rownames_A <- paste0("CSM_", sprintf("%02d", group_A))
rownames_B <- paste0("CSM_", sprintf("%02d", group_B))
rownames_C <- paste0("CSM_", sprintf("%02d", group_C))
rownames_D <- paste0("CSM_", sprintf("%02d", group_D))

# 実際の行名をキーとして、対応するタイプをリストに格納
type_mapping <- c(setNames(rep("A", length(rownames_A)), rownames_A),
                  setNames(rep("B", length(rownames_B)), rownames_B),
                  setNames(rep("C", length(rownames_C)), rownames_C),
                  setNames(rep("D", length(rownames_D)), rownames_D))

# データフレームに新しい "type" 列を追加
canopy_METADATA$type <- sapply(rownames(canopy_METADATA), function(rowname) {
  type_mapping[[rowname]]  # 各行名に対応するタイプを取得
})
canopy_METADATA <- canopy_METADATA[, !colnames(canopy_METADATA) %in% c("site", "depth")]


# Make Kingdom table
kingdom <- aggregate(percent, by=list(taxonomy$Kingdom),FUN = sum,na.rm=F) 
row.names(kingdom)<-kingdom [,1]
kingdom <- kingdom[,-1]
kingdom <- data.frame(kingdom)
kingdom.t <- t (kingdom)

# Make >1% Phylum table
phylum <- aggregate(percent, by=list(taxonomy$Phylum),FUN = sum,na.rm=F) 
row.names(phylum)<-phylum[,1]
phylum <- phylum[,-1]
phylum <- data.frame(phylum)
rowMeans <- rowMeans(phylum) 
phylum <- cbind(phylum,rowMeans)
major.phylum <- phylum[phylum[,"rowMeans"] > 1,]
major.phylum <- major.phylum[,-ncol(major.phylum)] 
major.phylum.t <- t (major.phylum)

# Make >1% Class (in >10% phylum) table
percent.table <- cbind (percent, taxonomy)
more.major.phylum <- phylum[phylum[,"rowMeans"] > 10,]
more.major.phylum.t <- t(more.major.phylum)
class.table <- data.frame()
for (i in 1: ncol (more.major.phylum.t)){
  class.subset <- subset (percent.table, Phylum = colnames(more.major.phylum.t)[i])
  class.table <- rbind (class.table, class.subset)}
class.ASV <- class.table[,1:(ncol(class.table)-7)]
class.taxonomy <- class.table[,(ncol(class.table)-6):ncol(class.table)]
class <- aggregate(class.ASV, by=list(class.taxonomy$Class),FUN = sum,na.rm=F) 
row.names(class)<-class[,1]
class <- class[,-1]
class <- data.frame(class)
rowMeans <- rowMeans(class) 
class <- cbind(class,rowMeans)
major.class <- class[class[,"rowMeans"] > 1,]
major.class <- major.class[,-ncol(major.class)] 
major.class.t <- t (major.class)

# nmds
percent.t <- t (percent)
nmds <-metaMDS(percent.t, trace=F, distance="bray")
env.fit<-envfit(nmds, canopy_METADATA, perm=10000, na.rm=TRUE)
kingdom.fit<-envfit(nmds, kingdom.t, perm=10000)
phylum.fit<-envfit(nmds, major.phylum.t, perm=10000)
class.fit<-envfit(nmds, major.class.t, perm=10000)

#Make dataset
data <- cbind(nmds$points,canopy_METADATA[,1:(ncol(canopy_METADATA))])
env.values <- (env.fit$vectors[1]$arrows)
pval <- (env.fit$vectors[4]$pvals)
env.arrows <- cbind (env.values, pval)
env.arrows <- data.frame(subset (env.arrows, pval < 0.05))
kingdom.values <- (kingdom.fit$vectors[1]$arrows)
pval <- (kingdom.fit$vectors[4]$pvals)
kingdom.arrows <- cbind (kingdom.values, pval)
kingdom.arrows <- data.frame(subset (kingdom.arrows, pval < 0.05))
phylum.values <- (phylum.fit$vectors[1]$arrows)
pval <- (phylum.fit$vectors[4]$pvals)
phylum.arrows <- cbind (phylum.values, pval)
phylum.arrows <- data.frame(subset (phylum.arrows, pval < 0.05))
class.values <- (class.fit$vectors[1]$arrows)
pval <- (class.fit$vectors[4]$pvals)
class.arrows <- cbind (class.values, pval)
class.arrows <- data.frame(subset (class.arrows, pval < 0.05))

# ggplot
rate = 1 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  scale_color_brewer(palette = "Set2")+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  geom_text_repel(data=env.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(env.arrows)),  size=4, color="black") +
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  geom_text_repel(data=phylum.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(phylum.arrows)),  size=4, color="#404040") +
  geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "ITS_TWINSPAN_everything_241211.png")


#without_words
rate = 1 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  scale_color_brewer(palette = "Set2")+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "ITS_TWINSPAN_everything_without_words_241211.png")

# ggplot_class_only
rate = 1 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  scale_color_brewer(palette = "Set2")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  geom_text_repel(data=phylum.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(phylum.arrows)), size=4, color="#404040") +
  geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "ITS_TWINSPAN_only_microbes_241211.png")

# without_words
rate = 1 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  scale_color_brewer(palette = "Set2")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "ITS_TWINSPAN_only_microbes_without_words_241211.png")


# ggplot_scores_only
rate = 1 # how many times shorter than acctual arrows
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  scale_color_brewer(palette = "Set2")+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_text_repel(data=env.arrows, aes(x=(NMDS1*rate* (1 - pval)), y=(NMDS2*rate* (1 - pval)), label=rownames(env.arrows)),  size=4, color="black") +
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "ITS_TWINSPAN_only_scores_241211.png")

# without_words
rate = 1 # how many times shorter than acctual arrows
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  scale_color_brewer(palette = "Set2")+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate* (1 - pval)), yend = (NMDS2*rate* (1 - pval))), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "ITS_TWINSPAN_only_scores_without_words.png")

#view a stress score
nmds$stress

write.csv(class.arrows,"class.arrows.csv")
write.csv(class.values,"class.values.csv")
write.csv(phylum.arrows,"phylum.arrows.csv")
write.csv(phylum.values,"phylum.values.csv")
write.csv(kingdom.arrows,"kingdom.arrows.csv")
write.csv(kingdom.values,"kingdom.values.csv")
write.csv(env.arrows,"env.arrows.csv")
write.csv(env.values,"env.values.csv")
write.csv(data,"data.csv")

ASV.t <- t(ASV)
adonis <- adonis(ASV.t ~ type, data=canopy_METADATA, permutations=10000)

# Save
Fval <- adonis[[1]][,4]
R2 <- adonis[[1]][,5]
Pval <-adonis[[1]][,6]
bind <- cbind(Fval, R2, Pval)
rownames (bind) <- rownames(adonis[[1]])                 

write.csv (bind, "PerMANOVA.csv")

