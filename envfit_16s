library(ggplot2)
library(vegan)
library(ggrepel)

setwd("~/Desktop/sueyoshi/for_r/data_YAKUSHIMA/for_envfit/16s")
METADATA <- read.csv("~/Desktop/sueyoshi/for_r/data_YAKUSHIMA/for_envfit/16s/extracted_with_N_16s_fixed.csv",row.names=1,header = T)
ASV.table <- read.table("~/Desktop/sueyoshi/for_r/data_YAKUSHIMA/for_envfit/16s/extracted_ASV_table_with_N_16s.txt",header = T)
#METADATA <- METADATA[,1:(ncol(METADATA)-26)] #加えた


# % table
ASV <- ASV.table [,1:(ncol(ASV.table)-6)]
taxonomy <- ASV.table [,(ncol(ASV.table)-5):ncol(ASV.table)]
percent <- ASV / mean(colSums(ASV)) *100
# Remove "k__", "p__" and "c__" before phylum name
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="k__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="p__", replacement = "", x)}),stringsAsFactors = FALSE)
taxonomy <- data.frame(lapply(taxonomy, function(x){gsub(pattern="c__", replacement = "", x)}),stringsAsFactors = FALSE)

# Make Kingdom table
kingdom <- aggregate(percent, by=list(taxonomy$Kingdom),FUN = sum,na.rm=F) 
row.names(kingdom)<-kingdom [,1]
kingdom <- kingdom[,-1]
kingdom <- data.frame(kingdom)
kingdom.t <- t (kingdom)

# Separate Bacteria and Archaea
percent.table <- cbind (percent, taxonomy)
bacteria.table <- subset (percent.table, percent.table$Kingdom == "Bacteria")
archaea.table <- subset (percent.table, percent.table$Kingdom == "Archaea")
bacteria.ASV <- bacteria.table [,1:(ncol(ASV.table)-6)]
archaea.ASV <- archaea.table [,1:(ncol(ASV.table)-6)]
bacteria.taxonomy <- bacteria.table  [,(ncol(ASV.table)-5):ncol(ASV.table)]
archaea.taxonomy <- archaea.table  [,(ncol(ASV.table)-5):ncol(ASV.table)]

# >1% bacterial phylum table
phylum.ag <- aggregate(bacteria.ASV, by=list(bacteria.taxonomy$Phylum),FUN = sum,na.rm=F)
row.names(phylum.ag)<- phylum.ag[,1]
phylum.ag <- phylum.ag[,-1]
phylum.ag <- data.frame(phylum.ag)
rowMeans <- rowMeans(phylum.ag)
phylum.ag <- cbind(phylum.ag,rowMeans)
major.phylum <- phylum.ag[phylum.ag[,"rowMeans"] > 1,]
major.phylum <- major.phylum[,-ncol(major.phylum)] 
major.phylum.t <- t (major.phylum)

# 1%> archaeal phylum table
a.phylum.ag <- aggregate(archaea.ASV, by=list(archaea.taxonomy$Phylum),FUN = sum,na.rm=F)
row.names(a.phylum.ag)<- a.phylum.ag[,1]
a.phylum.ag <- a.phylum.ag[,-1]
a.phylum.ag <- data.frame(a.phylum.ag)
rowMeans <- rowMeans(a.phylum.ag)
a.phylum.ag <- cbind(a.phylum.ag,rowMeans)
a.major.phylum <- a.phylum.ag[a.phylum.ag[,"rowMeans"] > 1,]
a.major.phylum <- a.major.phylum[,-ncol(a.major.phylum)] 
a.major.phylum.t <- t (a.major.phylum)

# Make >1% Class (in >10% bacteria phylum) table
percent.table <- cbind (percent, taxonomy)
more.major.phylum <- phylum.ag[phylum.ag[,"rowMeans"] > 10,]
more.major.phylum.t <- t(more.major.phylum)
class.table <- data.frame()
for (i in 1: ncol (more.major.phylum.t)){
  class.subset <- subset (percent.table, Phylum = colnames(more.major.phylum.t)[i])
  class.table <- rbind (class.table, class.subset)}
class.ASV <- class.table[,1:(ncol(class.table)-6)]
class.taxonomy <- class.table[,(ncol(class.table)-5):ncol(class.table)]
class <- aggregate(class.ASV, by=list(class.taxonomy$Class),FUN = sum,na.rm=F) 
row.names(class)<-class[,1]
class <- class[,-1]
class <- data.frame(class)
rowMeans <- rowMeans(class) 
class <- cbind(class,rowMeans)
major.class <- class[class[,"rowMeans"] > 1,]
major.class <- major.class[,-ncol(major.class)] 
major.class.t <- t (major.class)

# nmds
percent.t <- t (percent)
nmds <-metaMDS(percent.t, trace=F, distance="bray")
env.fit<-envfit(nmds, METADATA, perm=10000, na.rm=TRUE)
kingdom.fit<-envfit(nmds, kingdom.t, perm=10000)
phylum.fit<-envfit(nmds, major.phylum.t, perm=10000)
a.phylum.fit<-envfit(nmds, a.major.phylum.t,perm=10000)
class.fit<-envfit(nmds, major.class.t, perm=10000)

#Make dataset
data <- cbind(nmds$points,METADATA[,1:(ncol(METADATA)-11)])
env.values <- (env.fit$vectors[1]$arrows)
pval <- (env.fit$vectors[4]$pvals)
env.arrows <- cbind (env.values, pval)
env.arrows <- data.frame(subset (env.arrows, pval < 0.05))
kingdom.values <- (kingdom.fit$vectors[1]$arrows)
pval <- (kingdom.fit$vectors[4]$pvals)
kingdom.arrows <- cbind (kingdom.values, pval)
kingdom.arrows <- data.frame(subset (kingdom.arrows, pval < 0.05))
phylum.values <- (phylum.fit$vectors[1]$arrows)
pval <- (phylum.fit$vectors[4]$pvals)
phylum.arrows <- cbind (phylum.values, pval)
phylum.arrows <- data.frame(subset (phylum.arrows, pval < 0.05))
class.values <- (class.fit$vectors[1]$arrows)
pval <- (class.fit$vectors[4]$pvals)
class.arrows <- cbind (class.values, pval)
class.arrows <- data.frame(subset (class.arrows, pval < 0.05))

a.phylum.values <- (a.phylum.fit$vectors[1]$arrows)
pval <- (a.phylum.fit$vectors[4]$pvals)
a.phylum.arrows <- cbind (a.phylum.values, pval)
a.phylum.arrows <- data.frame(subset (a.phylum.arrows, pval < 0.05))

# ggplot
rate = 2 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=a.phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  geom_text_repel(data=env.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(env.arrows)),  size=4, color="black") +
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  geom_text_repel(data=phylum.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(phylum.arrows)),  size=4, color="#404040") +
  geom_text_repel(data=a.phylum.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(a.phylum.arrows)),  size=4, color="#202020") +
  geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "16s_everything.png")


#without_words
rate = 2 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=a.phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  coord_fixed()

# Save
ggsave(file = "16s_everything_without_words.png")

# ggplot_class_only
rate = 2 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=a.phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  geom_text_repel(data=phylum.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(phylum.arrows)), size=4, color="#404040") +
  geom_text_repel(data=a.phylum.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(a.phylum.arrows)), size=4, color="#202020") +
  geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "16s_only_class.png")

# without_words
rate = 2 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=a.phylum.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "16s_only_class_without_words.png")


# ggplot_scores_only
rate = 2 # how many times shorter than acctual arrows
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_text_repel(data=env.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(env.arrows)),  size=4, color="black") +
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "16s_scores_only.png")

# without_words
rate = 2 # how many times shorter than acctual arrows
ggplot()+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "16s_scores_only_without_words.png")

#view a stress score
nmds$stress

write.csv(a.phylum.arrows,"a.phylum.arrows")
write.csv(a.phylum.values,"a.phylum.values")
write.csv(class.arrows,"class.arrows")
write.csv(class.values,"class.values")
write.csv(phylum.arrows,"phylum.arrows")
write.csv(phylum.values,"phylum.values")
write.csv(kingdom.arrows,"kingdom.arrows")
write.csv(kingdom.values,"kingdom.values")
write.csv(env.arrows,"env.arrows")
write.csv(env.values,"env.values")
write.csv(data,"data")

#delete column
df.koki <- read.table("/Users/forestry/Desktop/sueyoshi/for_r/data_YAKUSHIMA/results/for_16S/extracted_rarefied_ASV_table.txt",header = T)
print(df.koki)
df.koki <- df.koki[,-c(2,4,6,7,9,10,22,24,35,36,37,43,46,47,56,60,62,64)]
write.table(df.koki,file="extracted_ASV_table_with_N_16s.txt")

df.koki2 <- read.csv("~/Desktop/sueyoshi/for_r/data_YAKUSHIMA/for_envfit/16s/extracted_metadata_new/with_N_16s.csv",header = T)
df.koki2 <- df.koki2[-51:-71,-17:-44]
write.csv(df.koki2,file="extracted_with_N_16s_fixed.csv")
