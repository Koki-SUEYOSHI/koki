library(ggplot2)
library(vegan)
library(ggrepel)


setwd("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/AMF/")
#delete column
df.koki <- read.table("/Users/forestry/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/results(DADA2~relative_abundance)/for_AMF/うまく行ったデータ/rarefied_ASV_table.txt",header = T)
print(df.koki)
df.koki <- df.koki[,-c(2,4,6,7,9,10,22,24,35,36,37,43,46,47,56,60,62,64)]
write.table(df.koki,file="extracted_ASV_table_with_N_AMF.txt")

df.koki2 <- read.csv("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/AMF/with_N_AMF.csv",header = T)
df.koki2 <- df.koki2[-51:-71,-c(17:44)]
write.csv(df.koki2,file="extracted_with_N_16s_fixed.csv")

METADATA <- read.csv("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/AMF/extracted_with_N_AMF_fixed.csv",row.names=1,header = T)
METADATA <- METADATA[, -c(6,8,10,12,14)]
ASV.table <- read.table("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/AMF/extracted_ASV_table_with_N_AMF.txt",header = T)
#METADATA <- METADATA[,1:(ncol(METADATA)-26)] #加えた

# % table
ASV <- ASV.table [,1:(ncol(ASV.table)-12)]
taxonomy <- ASV.table [,(ncol(ASV.table)-11):(ncol(ASV.table)-5)]
percent <- ASV / mean(colSums(ASV)) *100

# class table(本当はorder)
class.ag <- aggregate(percent, by=list(taxonomy$Class),FUN = sum,na.rm=F)
row.names(class.ag)<- class.ag[,1]
class.ag <- class.ag[,-1]
class.ag <- data.frame(class.ag)
rowMeans <- rowMeans(class.ag)
class.ag <- cbind(class.ag,rowMeans)
class.ag <- class.ag[order(class.ag$rowMeans,decreasing = T),] 
class.ag <- class.ag[,-ncol(class.ag)]
class.ag.t <- t(class.ag)

# Species table
species.ag <- aggregate(percent, by=list(taxonomy$Species),FUN = sum,na.rm=F)
row.names(species.ag) <- species.ag[,1]
species.ag <- species.ag[,-1]
species.ag <- data.frame(species.ag)
rowMeans <- rowMeans(species.ag)
species.ag <- cbind(species.ag,rowMeans)
species.ag <- species.ag[order(species.ag$rowMeans,decreasing = T),] 
species.ag <- species.ag[,-ncol(species.ag)]
species.ag.t <- t(species.ag)

# nmds
percent.t <- t (percent)
nmds <-metaMDS(percent.t, trace=F, distance="bray")
env.fit<-envfit(nmds, METADATA, perm=9999, na.rm=TRUE)
class.fit<-envfit(nmds, class.ag.t,perm=9999)
species.fit<-envfit(nmds, species.ag.t,perm=9999)

# nmds(set.seedで遊んだ)
percent.t <- t (percent)
set.seed(10)
nmds <-metaMDS(percent.t, k=3, trace=F, distance="bray")
#env.fit<-envfit(nmds, METADATA, perm=10000, na.rm=TRUE)
#kingdom.fit<-envfit(nmds, kingdom.t, perm=10000)
#phylum.fit<-envfit(nmds, major.phylum.t, perm=10000)
env.fit<-envfit(nmds, METADATA, na.rm=TRUE)
class.fit<-envfit(nmds, class.ag.t)
species.fit<-envfit(nmds, species.ag.t)
#class.fit<-envfit(nmds, class.ag.t, perm=10000)
#species.fit<-envfit(nmds, species.ag.t, perm=10000)

#Make dataset
data <- cbind(nmds$points,METADATA)
env.values <- (env.fit$vectors[1]$arrows)
pval <- (env.fit$vectors[4]$pvals)
env.arrows <- cbind (env.values, pval)
env.arrows <- data.frame(subset (env.arrows, pval < 0.05))
class.values <- (class.fit$vectors[1]$arrows)
pval <- (class.fit$vectors[4]$pvals)
class.arrows <- cbind (class.values, pval)
class.arrows <- data.frame(subset (class.arrows, pval < 0.05))
species.values <- (species.fit$vectors[1]$arrows)
pval <- (species.fit$vectors[4]$pvals)
species.arrows <- cbind (species.values, pval)
species.arrows <- data.frame(subset (species.arrows, pval < 0.05))

# ggplot
rate = 1.0 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=species.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  #geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  geom_text_repel(data=env.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(env.arrows)),  size=4, color="black") +
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)),  size=4, color="#404040") +
  geom_text_repel(data=species.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(species.arrows)),  size=4, color="#202020") +
  #geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "AMF_everything_for_conference.png")

#without_words
rate = 1.0 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=species.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  #geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  coord_fixed()

# Save
ggsave(file = "AMF_everything_without_words_for_conference.png")

#without_words
rate = 1.0 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=species.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  #geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  coord_fixed()

# Save
ggsave(file = "AMF_everything_without_words_for_conference.2.png")

# ggplot_AMF_only
rate = 1.0 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=species.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  #geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)), size=4, color="#404040") +
  geom_text_repel(data=species.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(species.arrows)), size=4, color="#202020") +
  #geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "AMF_only_microbes_for_conference.png")

# ggplot_AMF_only
rate = 1.0 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site),size=5)+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=species.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  #geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)), size=4, color="#404040") +
  geom_text_repel(data=species.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(species.arrows)), size=4, color="#202020") +
  #geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "AMF_only_microbes_for_conference.2.png")

# without_words
rate = 1.0 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=species.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  #geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "AMF_only_microbes_without_words_for_conference.png")

# without_words
rate = 1.0 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site),size=5)+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=species.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  #geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "AMF_only_microbes_without_words_for_conference.2.png")

# ggplot_scores_only
rate = 1.0 # how many times shorter than acctual arrows
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_text_repel(data=env.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(env.arrows)),  size=4, color="black") +
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "AMF_scores_only_for_conference.png")

# ggplot_scores_only
rate = 1.0 # how many times shorter than acctual arrows
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_text_repel(data=env.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(env.arrows)),  size=4, color="black") +
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "AMF_scores_only_for_conference.2.png")

# without_words
rate = 1.0 # how many times shorter than acctual arrows
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site, shape=tree),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "AMF_scores_only_without_words_for_conference.png")

# without_words
rate = 1.0 # how many times shorter than acctual arrows
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = site),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  coord_fixed()

# Save
ggsave(file = "AMF_scores_only_without_words_for_conference.2.png")

#view a stress score
nmds$stress

write.csv(class.arrows,"class.arrows.csv")
write.csv(class.values,"class.values.csv")
write.csv(species.arrows,"species.arrows.csv")
write.csv(species.values,"species.values.csv")
write.csv(env.arrows,"env.arrows.csv")
write.csv(env.values,"env.values.csv")
write.csv(data,"data.csv")

#perMANOVA
ASV.t <- t(ASV)
adonis <- adonis(ASV.t ~ tree*site, data=DESIGN, permutations=10000)

# Save
Fval <- adonis[[1]][,4]
R2 <- adonis[[1]][,5]
Pval <-adonis[[1]][,6]
bind <- cbind(Fval, R2, Pval)
rownames (bind) <- rownames(adonis[[1]])  

write.csv (bind, "PerMANOVA.csv")

#RDA(tatsumi-san)
library(vegan)

# Import files
#setwd("~/R/Analysis/1_Test")
#METADATA <- read.csv("metadata.csv")
#setwd("~/R/Analysis/1_Test/ITS")
#ASV.table <- read.table(file="rarefied_ASV_table.txt",header=T)
#ASV <- ASV.table [,1:(ncol(ASV.table)-7)]
#ASV.t <- t(ASV)

# If you want to remove NA data
bind <- cbind (ASV.t, METADATA)
bind.rm <- na.omit (bind)
ASV.t <- bind.rm [, 1:nrow(ASV.table)]
METADATA.rm <- na.omit (METADATA)

# RDA
rda1 <- dbrda(ASV.t ~ VD + pH + TOC.V + NO3.V + NH4.V, data=METADATA.rm) # CHANGE ME
rda1
plot(rda1)
anova <- anova(rda1, by="margin")
anova

# RDA
rda2 <- dbrda(ASV.t ~ 1, data=METADATA.rm, distance = "horn") # CHANGE ME
rda3 <- ordistep(rda1, scope = formula(rda2), direction = "both")
plot(rda3)
anova <- anova(rda3, by="margin")
anova

# Save
write.csv (anova, "RDA.csv")

#########TWINSPAN用#####################################################################################################################

library(ggplot2)
library(vegan)
library(ggrepel)

METADATA <- read.csv("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/AMF/extracted_with_N_AMF_fixed.csv",row.names=1,header = T)
METADATA <- METADATA[, -c(6,8,10,12,14)]
ASV.table <- read.table("~/Desktop/sueyoshi/Analize＆Datas/data_YAKUSHIMA/for_envfit/AMF/extracted_ASV_table_with_N_AMF.txt",header = T)
ASV.table <- ASV.table[,-c((ncol(ASV.table)-4):(ncol(ASV.table)))]
#METADATA <- METADATA[,1:(ncol(METADATA)-26)] #加えた

# % table
ASV <- ASV.table [,1:(ncol(ASV.table)-7)]
percent <- ASV / mean(colSums(ASV)) *100

rownames(ASV) <- paste("AMF", rownames(ASV), sep = "_")
rownames(percent) <- paste("AMF", rownames(percent), sep = "_")

# 50個のサンプル名を作成
# 指定された50個の番号をベクトルとして用意
selected_numbers <- c(1, 3, 5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 
                      29, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 
                      54, 55, 57, 58, 59, 61, 63, 65, 66, 67, 68)
# 選択した番号に基づいて新しい行名を作成
new_names <- paste0("CSM_", sprintf("%02d", selected_numbers))
colnames(ASV) <- new_names
colnames(percent) <- new_names
rownames(METADATA) <- new_names

canopyDATA <- rownames(METADATA[METADATA$site == "canopy", ])
ASV <- ASV[,canopyDATA]
ASV <- ASV[,!colnames(ASV) %in% c("CSM_30","CSM_34") ]
percent <- percent[,canopyDATA]
percent <- percent[,!colnames(percent) %in% c("CSM_30","CSM_34") ]
canopy_METADATA <- METADATA[canopyDATA, ]
canopy_METADATA <- canopy_METADATA[!rownames(canopy_METADATA) %in% c("CSM_30","CSM_34"), ]

taxonomy <- ASV.table [,(ncol(ASV.table)-6):ncol(ASV.table)]
# Remove "k__", "p__" and "c__" before phylum name
rownames(taxonomy) <- rownames(ASV)  # 行名を元の行名で設定

# グループごとの行名を定義
group_A <- c(25, 26, 27, 28, 29, 42, 44, 45, 48, 49, 53, 54, 55, 59, 61)
group_B <- c(38, 39, 40, 41, 65, 66)
group_C <- c(31, 32, 52, 57, 63, 67, 68)
group_D <- c(33, 50, 51, 58)

# `CSM_` を付けて行名を作成
rownames_A <- paste0("CSM_", sprintf("%02d", group_A))
rownames_B <- paste0("CSM_", sprintf("%02d", group_B))
rownames_C <- paste0("CSM_", sprintf("%02d", group_C))
rownames_D <- paste0("CSM_", sprintf("%02d", group_D))

# 実際の行名をキーとして、対応するタイプをリストに格納
type_mapping <- c(setNames(rep("A", length(rownames_A)), rownames_A),
                  setNames(rep("B", length(rownames_B)), rownames_B),
                  setNames(rep("C", length(rownames_C)), rownames_C),
                  setNames(rep("D", length(rownames_D)), rownames_D))

# データフレームに新しい "type" 列を追加
canopy_METADATA$type <- sapply(rownames(canopy_METADATA), function(rowname) {
  type_mapping[[rowname]]  # 各行名に対応するタイプを取得
})
canopy_METADATA <- canopy_METADATA[, !colnames(canopy_METADATA) %in% c("site", "depth")]


# class table(本当はorder)
class.ag <- aggregate(percent, by=list(taxonomy$Class),FUN = sum,na.rm=F)
row.names(class.ag)<- class.ag[,1]
class.ag <- class.ag[,-1]
class.ag <- data.frame(class.ag)
rowMeans <- rowMeans(class.ag)
class.ag <- cbind(class.ag,rowMeans)
class.ag <- class.ag[order(class.ag$rowMeans,decreasing = T),] 
class.ag <- class.ag[,-ncol(class.ag)]
class.ag.t <- t(class.ag)

# Species table
species.ag <- aggregate(percent, by=list(taxonomy$Species),FUN = sum,na.rm=F)
row.names(species.ag) <- species.ag[,1]
species.ag <- species.ag[,-1]
species.ag <- data.frame(species.ag)
rowMeans <- rowMeans(species.ag)
species.ag <- cbind(species.ag,rowMeans)
species.ag <- species.ag[order(species.ag$rowMeans,decreasing = T),] 
species.ag <- species.ag[,-ncol(species.ag)]
species.ag.t <- t(species.ag)

# nmds
percent.t <- t (percent)
nmds <-metaMDS(percent.t, trace=F, distance="bray")
env.fit<-envfit(nmds, canopy_METADATA, perm=9999, na.rm=TRUE)
class.fit<-envfit(nmds, class.ag.t,perm=9999)
species.fit<-envfit(nmds, species.ag.t,perm=9999)

# nmds(set.seedで遊んだ)
percent.t <- t (percent)
set.seed(10)
nmds <-metaMDS(percent.t, k=3, trace=F, distance="bray")
#env.fit<-envfit(nmds, METADATA, perm=10000, na.rm=TRUE)
#kingdom.fit<-envfit(nmds, kingdom.t, perm=10000)
#phylum.fit<-envfit(nmds, major.phylum.t, perm=10000)
env.fit<-envfit(nmds, METADATA, na.rm=TRUE)
class.fit<-envfit(nmds, class.ag.t)
species.fit<-envfit(nmds, species.ag.t)
#class.fit<-envfit(nmds, class.ag.t, perm=10000)
#species.fit<-envfit(nmds, species.ag.t, perm=10000)

#Make dataset
data <- cbind(nmds$points,canopy_METADATA)
env.values <- (env.fit$vectors[1]$arrows)
pval <- (env.fit$vectors[4]$pvals)
env.arrows <- cbind (env.values, pval)
env.arrows <- data.frame(subset (env.arrows, pval < 0.05))
class.values <- (class.fit$vectors[1]$arrows)
pval <- (class.fit$vectors[4]$pvals)
class.arrows <- cbind (class.values, pval)
class.arrows <- data.frame(subset (class.arrows, pval < 0.05))
species.values <- (species.fit$vectors[1]$arrows)
pval <- (species.fit$vectors[4]$pvals)
species.arrows <- cbind (species.values, pval)
species.arrows <- data.frame(subset (species.arrows, pval < 0.05))

# ggplot
rate = 1.0 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=species.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  #geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  geom_text_repel(data=env.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(env.arrows)),  size=4, color="black") +
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)),  size=4, color="#404040") +
  geom_text_repel(data=species.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(species.arrows)),  size=4, color="#202020") +
  #geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "AMF_TWINSPAN_everything_241211.png")

#without_words
rate = 1.0 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=species.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  #geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "AMF_TWINSPAN_everything_without_words_241211.png")

# ggplot_AMF_only
rate = 1.0 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=species.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  #geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)), size=4, color="#404040") +
  geom_text_repel(data=species.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(species.arrows)), size=4, color="#202020") +
  #geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "AMF_TWINSPAN_only_microbes_241211.png")

# ggplot_AMF_only
rate = 1.0 # how many times shorter than acctual arrows
options(ggrepel.max.overlaps = Inf)
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#404040")+
  geom_segment(data=species.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#202020")+
  #geom_segment(data=class.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="#808080")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  #geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)), size=4, color="#404040") +
  #geom_text_repel(data=species.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(species.arrows)), size=4, color="#202020") +
  #geom_text_repel(data=class.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(class.arrows)),  size=4, color="#808080") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "AMF_TWINSPAN_only_microbes_without_words_241211.png")

# ggplot_scores_only
rate = 1.0 # how many times shorter than acctual arrows
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  geom_text_repel(data=env.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(env.arrows)),  size=4, color="black") +
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "AMF_TWINSPAN_only_scores_241211.png")

# without_words
rate = 1.0 # how many times shorter than acctual arrows
ggplot()+
  scale_color_brewer(palette = "Set2")+
  geom_point(data=data, aes(x=MDS1,y=MDS2, color = type),size=5)+
  geom_segment(data=env.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_segment(data=kingdom.arrows, aes(x = 0, y = 0, xend = (NMDS1*rate), yend = (NMDS2*rate)), arrow = arrow(length = unit(0.3,"cm")),color="black")+
  # geom_text_repel(data=kingdom.arrows, aes(x=(NMDS1*rate), y=(NMDS2*rate), label=rownames(kingdom.arrows)),  size=4, color="black") +
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(text=element_text(size=14,color="black"),axis.text=element_text(size=12,color="black"))+
  theme(
    text = element_text(size = 14, color = "black"),
    axis.text = element_text(size = 12, color = "black"),
    axis.title = element_text(size = 14, color = "black")  # 軸ラベルを追加
  ) +
  labs(
    x = "NMDS1",  # x軸ラベル
    y = "NMDS2"   # y軸ラベル
  ) +
  coord_fixed()

# Save
ggsave(file = "AMF_TWINSPAN_only_scores_without_words_241211.png")

#view a stress score
nmds$stress

write.csv(class.arrows,"class.arrows.csv")
write.csv(class.values,"class.values.csv")
write.csv(species.arrows,"species.arrows.csv")
write.csv(species.values,"species.values.csv")
write.csv(env.arrows,"env.arrows.csv")
write.csv(env.values,"env.values.csv")
write.csv(data,"data.csv")

#perMANOVA
ASV.t <- t(ASV)
adonis <- adonis(ASV.t ~ type, data=canopy_METADATA, permutations=9999)

# Save
Fval <- adonis[[1]][,4]
R2 <- adonis[[1]][,5]
Pval <-adonis[[1]][,6]
bind <- cbind(Fval, R2, Pval)
rownames (bind) <- rownames(adonis[[1]])  

write.csv (bind, "PerMANOVA.csv")
